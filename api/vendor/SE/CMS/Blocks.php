<?php

namespace SE\CMS;

class Blocks extends Base
{

    /**
     * Скпировать шаблоны страниц из основной папки в песочницы
     *
     * Осн. папка $this->projectFolder
     * Песочница $this->pathEdit
     */
    function __construct($input)
    {
        parent::__construct($input);
        $this->updateEdit();
    }

    public function fetch($isId = false)
    {
        $this->result['items'] = array();
        foreach ($this->getDir($this->pathUnits) as $item) {
            $items = $this->getFiles($item['path'] . '/tpl/');

            foreach ($items as $it) {
                $info = $this->getInfoFile($item['name'] . '.' . $it['name']);
                $description = ($info) ? file_get_contents($this->pathUnits . $info) : '';
                $this->result['items'][] = array('name' => $item['name'] . '.' . $it['name'], 'description'=>$description);
            }
        }
    }

    public function save()
    {
        $filename = $this->getNameFile($this->input['name']);
        $fileFullPath = $time = null;
        $existFile = false;
        if ($filename) {
            $filesource = $this->input['source'];
            $fileFullPath = $this->pathUnits . $filename . '.html';
            if (!is_dir(dirname($fileFullPath))) mkdir(dirname($fileFullPath), 0755, 1);

            $time = filemtime($fileFullPath);

            $existFile = file_exists($fileFullPath);

            file_put_contents($fileFullPath, $filesource);
        }

        $infofile = $this->getInfoFile($this->input['name']);
        if ($infofile && $existFile && isset($this->input['description'])) {
            file_put_contents($this->pathUnits . $infofile, $this->input['description']);
        }

        $stylefile = $this->getStyleFile($this->input['name']);
        if ($stylefile && $existFile) {
            file_put_contents($this->pathUnits . $stylefile, $this->input['style']);
        }

        $scriptfile = $this->getScriptFile($this->input['name']);
        if ($scriptfile  && $existFile) {
            file_put_contents($this->pathUnits . $scriptfile, $this->input['script']);
        }

        $controller = $this->getControllerFile($this->input['name']);
        if ($controller && $existFile) {
            $filesource = $this->input['controller'];
            $controllerPath = $this->pathUnits . $controller;

            if (!$filesource) {
                $filesource = "<?php\n\n";
                $filesource .= "class " . $this->getControllerName($this->input['name']) . "_Controller extends Controller\n";
                $filesource .= "{\n";
                $filesource .= "\t" . 'public function Main($args = false)' . "\n";
                $filesource .= "\t{\n";
                $filesource .= "\t\t" . 'parent::Main($args); // TODO: Change the autogenerated stub' . "\n";
                $filesource .= "\t}\n";
                $filesource .= "}\n";
            }
            $fname = explode('.', $this->input['name']);
            $nemethod = ucfirst(strtolower(!empty($fname[1]) ? $fname[1] : 'main'));


            if (strpos($filesource, 'function '.$nemethod.'(') === false) {
                $nsours = "\n\t" . 'public function '.$nemethod.'($args = false)' . "\n";
                $nsours .= "\t{\n";
                if ($nemethod == 'Item') {
                    $nsours .= "\t\t" . 'parent::Item($args); // TODO: Change the autogenerated stub' . "\n";
                } else
                    $nsours .= "\t\t\n";
                $nsours .= "\t}\n";
                $ipos = strrpos($filesource, '}');
                $filesource = substr_replace($filesource, $nsours, $ipos, 0);
            }

            $time = filemtime($controllerPath);
            file_put_contents($controllerPath, $filesource);
        }

        if ($fileFullPath && filemtime($fileFullPath) >= $time) {
            $this->result['status'] = 'OK';
        } else {
            $this->error = 'Ошибка при сохранении файла';
        }
        $this->info();
    }

    public function delete()
    {
        //$filename = $this->input['name'];
        if (!empty($this->input['id'])) {
            $File = $this->getNameFile($this->input['id']);
            if (file_exists($this->pathUnits . $File . '.html'))
                rename($this->pathUnits . $File . '.html', $this->pathUnits . $File . '.del');
            $this->result['status'] = 'ok';
            return true;
        }
        $this->error = 'Не удается удалить файл';
        return false;
    }

    private function getNameFile($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        if (empty($fname[1])) $fname[1] = 'main';
        return $fname[0] . '.unit/tpl/' . $fname[1];
    }

    private function getInfoFile($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        if (empty($fname[1])) $fname[1] = 'main';
        return $fname[0] . '.unit/tpl/' . $fname[1].'.info';
    }

    private function getControllerFile($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        return $fname[0] . '.unit/controller.php';
    }

    private function getStyleFile($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        if (empty($fname[1])) $fname[1] = 'main';
        return $fname[0] . '.unit/tpl/' . $fname[1] . '.css';
    }

    private function getScriptFile($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        if (empty($fname[1])) $fname[1] = 'main';
        return $fname[0] . '.unit/tpl/' . $fname[1] . '.js';
    }


    private function getControllerName($name)
    {
        if (empty($name)) return null;
        $fname = explode('.', $name);
        $typeArr = explode('_', $fname[0]);
        $unit = '';
        foreach($typeArr as $t) {
            $unit .= ucfirst(strtolower($t));
        }
        return $unit;
    }


    public function info($id = null)
    {
        $filename = $this->getNameFile($this->input['name']);
        $controller = $this->getControllerFile($this->input['name']);
        $info = $this->getInfoFile($this->input['name']);
        $style = $this->getStyleFile($this->input['name']);
        $script = $this->getScriptFile($this->input['name']);

        $this->result['description'] = file_get_contents($this->pathUnits . $info);
        $this->result['source'] = file_get_contents($this->pathUnits . $filename . '.html');
        $this->result['controller'] = file_get_contents($this->pathUnits . $controller);
        $this->result['style'] = file_get_contents($this->pathUnits . $style);
        $this->result['script'] = file_get_contents($this->pathUnits . $script);
    }

    /**
     * getFiles - получение файлов '.TWIG' из заданной директории со вспомогательными данными
     *
     * @param string $dir Директория
     */
    private function getDir($dir)
    {
        $files = glob($dir . '*.unit');
        $result = array();
        foreach ($files as $file) {
            $result[] = array(
                'id' => basename($file),
                'name' => basename($file, '.unit'),
                'fullname' => basename($file),
                'path' => $file,
                'timestamp' => filemtime($file)
            );
        }
        return $result;
    }

    private function getFiles($dir)
    {
        $files = glob($dir . '*.html');
        $result = array();
        foreach ($files as $file) {
            $result[] = array(
                'name' => basename($file, '.html'),
                'fullname' => basename($file),
                'path' => $file,
            );
        }
        return $result;
    }


    private function updateEdit()
    {
        $originalFiles = $this->getFiles($this->pathTemplates);
        foreach ($originalFiles as $originalFile) {
            if (
                !file_exists($this->pathUnits . $originalFile['fullname'])
                or
                ($originalFile['timestamp'] >= filemtime($this->pathUnits . $originalFile['fullname'] . '/tpl/main.html'))
            ) {
                if (!file_exists($this->pathUnits . $originalFile['fullname'] . '.del')) {
                    copy($originalFile['path'], $this->pathUnits . $originalFile['fullname']);
                }
            }
        }
    }
}